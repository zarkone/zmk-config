/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

&mt {
    tapping-term-ms = <200>;
};

// 0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//       30 31 32   33 34 35

/ {
    combos {
        compatible = "zmk,combos";

        combo_tab {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp ESC>;
        };

        combo_ctrl_backspace {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp LC(BSPC)>;
        };

        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&caps_word>;
        };

    };

    behaviors {
        c_ht: ctrl_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_CTRL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            bindings = <&kp>, <&kp>;
        };
    };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "> CLDH";
                        bindings = <
            &kp Q   &kp W &kp F &kp P &kp B                &kp J &kp L &kp U     &kp Y   &kp SEMI
    &c_ht LCTRL A  &c_ht LSHFT R &kp S &c_ht LGUI T &kp G  &kp M &c_ht RGUI N    &kp E   &c_ht RSHFT I   &c_ht RCTRL O
            &kp Z   &kp X &kp C &kp D &kp V                &kp K &kp H &kp COMMA &kp DOT &kp FSLH

               &lt 2 EQUAL  &lt 1 SPACE &mt LALT SPACE        &mt RALT RET  &lt 1 BSPC  &lt 2 SPACE
                        >;
                };

                lower_layer {
                        label = "$ SYM";
                        bindings = <
            &kp GRAVE &kp UNDER  &kp EQUAL  &kp MINUS  &kp PLUS         &kp K_MUTE  &kp K_VOL_DN  &kp K_PP  &kp K_VOL_UP  &kp COLON
             &kp LT   &kp GT    &kp LPAR   &kp RPAR   &kp PG_UP        &kp DQT     &kp LEFT      &kp UP    &kp RIGHT     &kp SQT
             &kp LBRC &kp RBRC  &kp LBKT   &kp RBKT   &kp PG_DN        &kp TILDE   &kp HOME      &kp DOWN  &kp END       &kp BSLH

                              &lt 3  TAB     &kp ESC    &kp LALT        &kp RALT     &kp DEL    &lt 3 EQUAL
                        >;
                };

                raise_layer {
                        label = "# NUM";
                        bindings = <
            &trans    &trans  &trans    &kp AMPS   &kp KP_MULTIPLY   &caps_word &kp N7 &kp N8 &kp N9 &kp TILDE
            &kp EXCL  &kp AT  &kp HASH  &kp DLLR   &kp CARET         &kp CAPS   &kp N4 &kp N5 &kp N6 &kp GRAVE
            &trans    &trans &trans     &kp PRCNT  &kp PIPE          &kp PSCRN  &kp N1 &kp N2 &kp N3 &kp DOT

                           &trans &lt 3 SPACE   &kp SPACE             &kp N0   &lt 3 DOT &trans
                        >;
                };

                func_layer {
                        label = "} Fn";
                        bindings = <
           &bt BT_CLR    &trans        &trans        &trans        &trans     &trans   &kp F7   &kp F8  &kp F9  &kp F10
           &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &trans     &trans   &kp F4   &kp F5  &kp F6  &kp F11
           &trans        &trans        &trans        &trans        &trans     &trans   &kp F1   &kp F2  &kp F3  &kp F12

                          &trans   &trans    &trans                   &trans    &trans   &trans
                        >;
                };
        };
};