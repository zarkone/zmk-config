/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

&mt {
    tapping-term-ms = <200>;
};

// 0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//       30 31 32   33 34 35

/ {
    behaviors {
        lh_ctrl: left_hand_ctrl_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_CTRL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            // all right split keys and left split thumb row
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        lh_sft: left_hand_sft_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_SFT_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            // all keys but right to lshft, 1,2,11,12
            hold-trigger-key-positions = <0 3 4 5 6 7 8 9 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36>;
        };

        lh_win: left_hand_win_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_WIN_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            // all keys but left to lwin, 2, 11, 12, 22
            hold-trigger-key-positions = <0 1 3 4 5 6 7 8 9 10 13 14 15 16 17 18 19 20 21 23 24 25 26 27 28 29 30 31 32 33 34 35 36>;
        };

        // right hand //

        rh_ctrl: right_hand_ctrl_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_CTRL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            // all lef split keys and right split thumb row
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35 36>;
        };

        rh_sft: right_hand_sft_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_SFT_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            // all keys but left to rshft, 7, 8, 17, 18
            hold-trigger-key-positions = <0 1 2 3 4 5 6 9 10 11 12 13 14 15 16 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36>;
        };

        rh_win: right_hand_win_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_WIN_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            // all keys but right to rwin, 7, 17, 18, 27
            hold-trigger-key-positions = <0 1 2 3 4 5 6 9 10 11 12 13 14 15 16 19 21 22 23 24 25 26 28 29 30 31 33 34 35 36 37 38 39 40 41>;
        };


        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "> CLDH";
                        bindings = <
            &kp Q            &kp W      &kp F &kp P          &kp B        &kp J &kp L          &kp U       &kp Y   &kp SEMI
            &lh_sft LSHFT A  &kp R      &kp S &lh_win LGUI T &kp G        &kp M &rh_win RGUI N &kp E       &kp I   &rh_sft RSHFT O
            &lh_ctrl LCTRL Z &kp X      &kp C &kp D          &kp V        &kp K &kp H          &kp COMMA   &kp DOT &rh_ctrl RCTRL FSLH

                               &lt 2 EQUAL  &lt 1 SPACE &mt LALT SPACE        &mt RALT RET  &lt 1 BSPC  &lt 2 SPACE
                        >;
                };

                lower_layer {
                        label = "$ SYM";
                        bindings = <
             &kp TAB  &kp UNDER  &kp EQUAL  &kp MINUS  &kp PLUS         &kp K_MUTE  &kp K_VOL_DN  &kp K_PP  &kp K_VOL_UP  &kp BSLH
             &kp LT   &kp GT     &kp LPAR   &kp RPAR   &kp PG_UP        &kp DQT     &kp LEFT      &kp UP    &kp RIGHT     &kp SQT
             &kp LBRC &kp RBRC   &kp LBKT   &kp RBKT   &kp PG_DN        &kp TILDE   &kp HOME      &kp DOWN  &kp END       &kp GRAVE

                              &lt 3  TAB     &kp ESC    &kp LALT        &kp RALT     &kp DEL    &lt 3 EQUAL
                        >;
                };

                raise_layer {
                        label = "# NUM";
                        bindings = <
            &trans    &trans  &trans    &kp AMPS   &kp KP_MULTIPLY   &caps_word &kp N7 &kp N8 &kp N9 &kp TILDE
            &kp EXCL  &kp AT  &kp HASH  &kp DLLR   &kp CARET         &kp CAPS   &kp N4 &kp N5 &kp N6 &kp GRAVE
            &trans    &trans &trans     &kp PRCNT  &kp PIPE          &kp PSCRN  &kp N1 &kp N2 &kp N3 &kp DOT

                           &trans &lt 3 SPACE   &kp SPACE             &kp N0   &lt 3 DOT &trans
                        >;
                };

                func_layer {
                        label = "} Fn";
                        bindings = <
           &bt BT_CLR    &trans        &trans        &trans        &trans     &trans   &kp F7   &kp F8  &kp F9  &kp F10
           &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &trans     &trans   &kp F4   &kp F5  &kp F6  &kp F11
           &trans        &trans        &trans        &trans        &trans     &trans   &kp F1   &kp F2  &kp F3  &kp F12

                          &trans   &trans    &trans                   &trans    &trans   &trans
                        >;
                };
        };
};